#==============================Building the Program==============================#
When trying to build the programs make sure to navigate into the build directory such that it is the working directory

PreReqs:
JavaC is required for generating syntax diagrams via the makefile
The required C++ runtimes *should* be included in this project, but I cannot guarantee compatibility due to limited testing

!IMPORTANT!
Antlr:
  To generate the C++ antlr files run 'make antlr' which will create the required antlr header files in Source_Files/generated_source
  This needs to be done manually before running Release, Debug, or Unit_Tests (The makefile needs to parse through the directory to find source files before running)
  If the header files generated by ANTLR are not present, building the executable will fail

Parse Tree:
  To generate a graphical parse tree, run 'make parse_tree FILE_PATH=<path to input file>'
  The path to input file should be relative to the root project directory (i.e Compiler_Assignment), so typically ./Input/[filename].uc would be used
  This will generate a parse tree of the given files based on the uC grammer rules and display it

Railroad Diagram:
  To generate a railroad diagram of the grammer, run 'make railroad'
  The resulting diagrams will be located in Build/output/uC
  Either the PDF or Index.html will work, though I find the HTML version easier to read

Release:
  To build the release version of the application run either 'make' or 'make release'
  This version will not have any debugging information in the compiled binary

Debug:
  To build the debug version of the application run 'make debug'
  This will enable debugging using either an IDE's built-in debugger or GDB

Clean:
    To remove the generated object files (ex. such as if you want to do a complete recompile) and executable, run 'make clean'
    This will delete the object file directory, railroad diagram output, and compiled binary.
    Next time make is run, it will recompile everything from scratch

Clean Antlr:
    If you want to remove the existing header files generated by ANTLR (which are located in Source_Files/generated_source), run 'make clean_antlr'
    This will delete the header files. If used, 'make antlr' will need to be used to re-generate them before the executable can be recompiled


#==============================Running the Program==============================#
Application:
  Navigate to the root assignment directory (NOT THE BUILD DIRECTORY)
  To run the application run: './Build/[Application_Name]'

  For our compiler, the arguments are "-compile <input file> [output directory]"
        Normally this would look like "-compile ./Input/[filename].uc ./Output"
  This helps keep the directory structure cleaner by having a dedicated place for inputs and outputs/created java files


#==============================Modifying Directories/Names==============================#
The makefile is configured to dynamically search through several source directories and build anything in them
If you only add files to existing directories, the makefile and variables file(s) do not need to be updated

If you will be modifying the makefile/variables file here is a small bit of makefile terminology
  VAR_NAME := [VAR_DATA] #Creates/Assigns new variable or modifies existing one
  $(VAR_NAME) #Substitutes the contents of the variable in place of $(VAR_NAME) when executing

If you add a new directory, then the variables file will need to be updated, but the makefile itself shouldn't unless major changes have been made
  > Following the existing formatting, create a variable which is the path to your newly added folder
  > If an existing super-directory already exists as a variable try to use that so that if they are renamed/moved your folder path will also be updated
    Ex: If you create a folder 'Example' under Source_Files/src (which is already a variable APP_SRC_DIR) make your variable EXAMPLE_VAR := $(APP_SRC_DIR)/Example
  > Then add your new folder variable to the appropriate 'ALL_***_DIR' at the bottom by appending '$(YOUR_FOLDER_PATH_VAR)' to the end of the appropriate one
